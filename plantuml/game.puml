@startuml

protocol Effectable {
    +effect(gameState: GameState): Effect
}

protocol Animatable {
    +toAnimate: Anination
    +startAnimation(): Void
    +stopAnimation(): Void
}

protocol Destroyable extends Effectable {
    +health: Int
    +isDestroyed: Bool
    +takeDamage(damage: Int): Int
    +effect(gameState: GameState): Effect
}

protocol Collidable {
    +isCollidingWith(other: Collidable): Bool
    +handleCollision(with: Collidable): Void
    +handleCollisionOn(side: Side, with: Collidable): Void
}

protocol Movable {
    +move(to: Direction)
}

protocol Collectible extends Effectable {
    +effect(gameState: GameState): Effect
}

protocol GameObjectBehaviour {
    +isAffectedByPhysics: Bool
    +isVisible: Bool

    +action(): Void
}

class Power implements Effectable {
    +effect(gameState: GameState): Effect
}

class GameEnemy implements Destroyable, GameObjectBehaviour, Movable, Animatable {
}

class GameBlock implements Destroyable, GameObjectBehaviour, Movable, Animatable {
}

class Effect {
    +execute(): Void
}

class GamePlayer implements GameObjectBehaviour, Collidable, Movable, Animatable {
    +health: Int
    +lives: Int
    +strength: Int
    +speed: Int
    +power: Power
}

class Projectile implements CirclePhysicsObject, Collidable, Animatable {
    +damage: Int
    +speed: Int
    +lifetime: Int
    +owner: GameObject
    +onHit(gameObject: GameObject): Void
}

protocol PhysicsObject {
    +center: CGPoint
    +velocity: CGVector
    +acceleration: CGVector
    +mass: CGFloat
}

class CirclePhysicsObject implements PhysicsObject {
    +radius: CGFloat
}

class RectanglePhysicsObject implements PhysicsObject {
    +width: CGSize
    +height: CGSize
}

@enduml

