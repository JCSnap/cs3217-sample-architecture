@startuml
class GameObject {
    identifier: String
    center: CGPoint
}

protocol Component {
    identifier: String
    gameObject: GameObject
}

protocol Effectable {
    +effect(gameState: GameState): Effect
}

struct Renderable implements Component {
    +image: String
    +position: CGPoint
    +size: CGSize
}

struct Animatable implements Component {
    +toAnimate: Anination
    +startAnimation(): Void
    +stopAnimation(): Void
}

struct Destroyable implements Effectable, Component {
    +health: Int
    +isDestroyed: Bool
    +takeDamage(damage: Int): Int
    +effect(gameState: GameState): Effect
}

struct Collidable implements Component {
    +isCollidingWith(other: Collidable): Bool
    +handleCollision(with: Collidable): Void
    +handleCollisionOn(side: Side, with: Collidable): Void
}

struct Movable {
    +move(to: Direction)
}

struct Droppable {
    +drop(): Collectible
}

class Collectible extends GameObject implements Effectable {
    +effect(gameState: GameState): Effect
}

struct GameObjectBehaviour implements Component {
    +isAffectedByPhysics: Bool
    +isVisible: Bool

    +action(): Void
}

struct Power implements Effectable {
    +effect(gameState: GameState): Effect
}

class GameEnemy extends GameObject {
    +destroyable: Destroyable
    +gameObjectBehaviour: GameObjectBehaviour
    +movable: Movable
    +animatable: Animatable
    +droppable: Droppable
    +physicsObject: RectanglePhysicsObject
}

class GameBlock extends GameObject {
    +destroyable: Destroyable
    +gameObjectBehaviour: GameObjectBehaviour
    +movable: Movable
    +animatable: Animatable
    +droppable: Droppable
    +physicsObject: PhysicsObject
}

class Effect {
    +execute(): Void
}

class GamePlayer extends GameObject {
    +destroyable: Destroyable
    +gameObjectBehaviour: GameObjectBehaviour
    +movable: Movable
    +animatable: Animatable
    +power: Power
    +physicsObject: RectanglePhysicsObject
    +renderable: Renderable
}

struct Lifetime extends Component {
    +maxLifetime: Int
    +currentLifetime: Int
}

struct Damageable extends Component {
    +damage: Int
    +onHit(gameObject: GameObject): Void
}

class Projectile {
    +damageable: Damageable
    +lifetime: Lifetime
    +movable: Movable
    +animatable: Animatable
    +physicsObject: CirclePhysicsObject
}

class GameObjectFactory {
    +createGameObject(type: BoardObject): GameObject
}

protocol PhysicsObject {
    +center: CGPoint
    +velocity: CGVector
    +acceleration: CGVector
    +mass: CGFloat

    +isCollidingWith(other: CirclePhysicsObject): Bool
    +isCollidingWith(other: RectanglePhysicsObject: Bool
    +handleCollision(with: CirclePhysicsObject): Void
    +handleCollision(with RectanglePhysicsObject): Void
}

class CirclePhysicsObject implements PhysicsObject {
    +radius: CGFloat
}

class RectanglePhysicsObject implements PhysicsObject {
    +width: CGSize
    +height: CGSize
}

@enduml

